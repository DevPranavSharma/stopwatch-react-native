{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/pranav/github-repos/stopwatch-react-native/App.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nvar instructions = Platform.select({\n  ios: \"Press Cmd+R to reload,\\nCmd+D or shake for dev menu\",\n  android: \"Double tap R on your keyboard to reload,\\nShake or press menu button for dev menu\"\n});\nvar functionInt;\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.updateTime = _this.updateTime.bind(_assertThisInitialized(_this));\n    _this.onButtonPress = _this.onButtonPress.bind(_assertThisInitialized(_this));\n    _this.onPressStop = _this.onPressStop.bind(_assertThisInitialized(_this));\n    _this.state = {\n      count: 0,\n      pressed: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"onButtonPress\",\n    value: function onButtonPress() {\n      if (!this.state.pressed) {\n        this.setState({\n          pressed: true\n        });\n        this.updateTime();\n      }\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime() {\n      var _this2 = this;\n\n      functionInt = setInterval(function () {\n        _this2.setState(function (state) {\n          return {\n            count: _this2.state.count + 1\n          };\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"onPressStop\",\n    value: function onPressStop() {\n      this.setState({\n        pressed: false\n      });\n      clearInterval(functionInt);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 5\n        }\n      }, React.createElement(Text, {\n        style: styles.welcome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, \"Stopwatch\"), React.createElement(Text, {\n        style: styles.welcome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 2\n        }\n      }, this.state.count), React.createElement(View, {\n        style: styles.buttonrow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 2\n        }\n      }, React.createElement(Button, {\n        style: styles.btn,\n        onPress: this.onButtonPress,\n        title: \"Start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 4\n        }\n      }), React.createElement(Button, {\n        style: styles.btn,\n        onPress: this.onPressStop,\n        title: \"Stop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 2\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  buttonrow: {\n    flexDirection: 'row',\n    margin: 5\n  },\n  btn: {\n    paddingRight: 5,\n    margin: 5\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["/home/pranav/github-repos/stopwatch-react-native/App.js"],"names":["React","Component","instructions","Platform","select","ios","android","functionInt","App","props","updateTime","bind","onButtonPress","onPressStop","state","count","pressed","setState","setInterval","clearInterval","styles","container","welcome","buttonrow","btn","StyleSheet","create","flexDirection","margin","paddingRight","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","color","marginBottom"],"mappings":"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","sourcesContent":["import  React,{Component} from 'react';\nimport { Platform, StyleSheet, Text, View,Button } from 'react-native';\n//import { Component } from 'react';\n\nconst instructions = Platform.select({\n  ios: `Press Cmd+R to reload,\\nCmd+D or shake for dev menu`,\n  android: `Double tap R on your keyboard to reload,\\nShake or press menu button for dev menu`,\n});\n\nvar functionInt\nexport default class App extends Component {\n  constructor(props){\n   super(props)\n   this.updateTime=this.updateTime.bind(this);\n   this.onButtonPress=this.onButtonPress.bind(this)\n   this.onPressStop=this.onPressStop.bind(this)\n   this.state={\n     count: 0,\n     pressed: false\n   }\n\n  }\n  onButtonPress(){\n    if(!this.state.pressed){\n      this.setState({pressed:true});\n      this.updateTime()\n    }\n  }\n  updateTime(){\n   functionInt= setInterval(()=>{this.setState((state)=>{return {count: this.state.count+1}})},1000)\n  }\n  onPressStop(){\n    this.setState({pressed:false});\n    clearInterval(functionInt)\n  }\n render(){ return (\n    <View style={styles.container}>\n      <Text style={styles.welcome}>Stopwatch</Text>\n <Text style={styles.welcome}>{this.state.count}</Text>\n <View style={styles.buttonrow}> \n   <Button style={styles.btn}onPress={this.onButtonPress} title=\"Start\"/>\n <Button style={styles.btn} onPress={this.onPressStop} title=\"Stop\"/>\n </View>\n\n    </View>\n  );}\n}\n\nconst styles = StyleSheet.create({\n  buttonrow:{\n     flexDirection:'row',\n     margin: 5\n  },\n  btn:{\n    paddingRight:5,\n    margin:5\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}